"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.a = installNuxtSiteConfig;exports.b = useSiteConfig;exports.c = createSitePathResolver;exports.d = withSiteUrl;exports.e = useNitroOrigin;exports.g = getSiteConfigStack;exports.i = initSiteConfig;exports.u = updateSiteConfig;exports.w = withSiteTrailingSlash;var _kit = await jitiImport("@nuxt/kit");
var _urls = await jitiImport("site-config-stack/urls");
var _stdEnv = await jitiImport("std-env");
var _pkgTypes = await jitiImport("pkg-types");
var _siteConfigStack = await jitiImport("site-config-stack");
var _ufo = await jitiImport("ufo");

async function initSiteConfig(nuxt = (0, _kit.tryUseNuxt)()) {
  if (!nuxt)
  return;
  let siteConfig = nuxt._siteConfig;
  if (siteConfig)
  return siteConfig;
  siteConfig = (0, _siteConfigStack.createSiteConfigStack)();
  const rootDir = nuxt?.options.rootDir || process.cwd?.() || false;
  siteConfig.push({
    _context: "system",
    _priority: -15,
    name: rootDir ? rootDir.split("/").pop() : void 0,
    env: process.env.NODE_ENV
  });
  if (rootDir) {
    const pkgJson = await (0, _pkgTypes.readPackageJSON)(rootDir);
    if (pkgJson) {
      siteConfig.push({
        _context: "package.json",
        _priority: -10,
        name: pkgJson.name,
        description: pkgJson.description
      });
    }
  }
  siteConfig.push({
    _context: "vendorEnv",
    _priority: -5,
    url: [
    // vercel
    process.env.VERCEL_URL,
    process.env.NUXT_ENV_VERCEL_URL,
    // netlify
    process.env.URL,
    // cloudflare pages
    process.env.CF_PAGES_URL].
    find((k) => Boolean(k)),
    name: [
    // vercel
    process.env.NUXT_ENV_VERCEL_GIT_REPO_SLUG,
    // netlify
    process.env.SITE_NAME].
    find((k) => Boolean(k))
  });
  const runtimeConfig = nuxt.options.runtimeConfig;
  const runtimeConfigEnvKeys = [
  ...Object.entries(runtimeConfig.site || {}).filter(([k]) => k.startsWith("site")).map(([k, v]) => [k.replace(/^site/, ""), v]),
  ...Object.entries([...Object.entries(runtimeConfig), ...Object.entries(runtimeConfig.public)]).filter(([k]) => k.startsWith("site")).map(([k, v]) => [k.replace(/^site/, ""), v])];

  siteConfig.push({
    _priority: -2,
    _context: "legacyRuntimeConfig",
    ...Object.fromEntries(runtimeConfigEnvKeys)
  });
  siteConfig.push({
    _context: "buildEnv",
    _priority: -1,
    ...(0, _siteConfigStack.envSiteConfig)(process.env)
  });
  nuxt._siteConfig = siteConfig;
  return siteConfig;
}
async function installNuxtSiteConfig(nuxt = (0, _kit.tryUseNuxt)()) {
  await (0, _kit.installModule)(await (0, _kit.resolvePath)("nuxt-site-config"));
  await initSiteConfig(nuxt);
}
function getSiteConfigStack(nuxt = (0, _kit.tryUseNuxt)()) {
  if (!nuxt)
  throw new Error("Nuxt context is missing.");
  if (!nuxt._siteConfig)
  throw new Error("Site config is not initialized. Make sure you are running your module after nuxt-site-config.");
  return nuxt._siteConfig;
}
function updateSiteConfig(input, nuxt = (0, _kit.tryUseNuxt)()) {
  const container = getSiteConfigStack(nuxt);
  return container.push(input);
}
function useSiteConfig(nuxt = (0, _kit.tryUseNuxt)()) {
  const container = getSiteConfigStack(nuxt);
  return container.get();
}

function useNitroOrigin() {
  const cert = _stdEnv.env.NITRO_SSL_CERT;
  const key = _stdEnv.env.NITRO_SSL_KEY;
  let host = _stdEnv.env.NITRO_HOST || _stdEnv.env.HOST || false;
  let port = _stdEnv.env.NITRO_PORT || _stdEnv.env.PORT || (_stdEnv.isDevelopment ? 3e3 : false);
  let protocol = cert && key || !_stdEnv.isDevelopment ? "https" : "http";
  if ((_stdEnv.isDevelopment || _stdEnv.env.prerender) && _stdEnv.env.NUXT_VITE_NODE_OPTIONS) {
    const origin = JSON.parse(_stdEnv.env.NUXT_VITE_NODE_OPTIONS).baseURL.replace("/__nuxt_vite_node__", "");
    host = (0, _ufo.withoutProtocol)(origin);
    protocol = origin.includes("https") ? "https" : "http";
  }
  if (typeof host === "string" && host.includes(":")) {
    port = host.split(":").pop();
    host = host.split(":")[0];
  }
  port = port ? `:${port}` : "";
  return `${protocol}://${host}${port}/`;
}

function withSiteTrailingSlash(path) {
  const siteConfig = useSiteConfig();
  return (0, _urls.fixSlashes)(siteConfig.trailingSlash, path);
}
function createSitePathResolver(options = {}, nuxt = (0, _kit.useNuxt)()) {
  const siteConfig = useSiteConfig();
  const nitroOrigin = useNitroOrigin();
  const canUseSiteUrl = (options.canonical !== false || _stdEnv.env.prerender) && siteConfig.url;
  const nuxtBase = nuxt.options.app.baseURL || "/";
  return (path) => {
    return (0, _urls.resolveSitePath)(path, {
      ...options,
      siteUrl: canUseSiteUrl ? siteConfig.url : nitroOrigin,
      trailingSlash: siteConfig.trailingSlash,
      base: nuxtBase
    });
  };
}
function withSiteUrl(path, options = {}) {
  const siteConfig = useSiteConfig();
  if (!siteConfig.url && options.throwErrorOnMissingSiteUrl)
  throw new Error("Missing url in site config. Please add `{ site: { url: <url> } }` to nuxt.config.ts.");
  const nuxt = (0, _kit.useNuxt)();
  const base = nuxt.options.app.baseURL || nuxt.options.nitro.baseURL || "/";
  return (0, _urls.resolveSitePath)(path, {
    absolute: true,
    siteUrl: siteConfig.url || "",
    trailingSlash: siteConfig.trailingSlash,
    base,
    withBase: options.withBase
  });
} /* v9-6e4fb1c6e46628c0 */
